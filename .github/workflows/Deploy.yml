name: Deploy

on: 
  push:
  pull_request:
    branches:
      - master
      
jobs:
  create-artifacts:
    runs-on: ubuntu-latest
    name: Create Deployment artifacts
    steps:
      - uses: actions/checkout@v2
      
      - name: Compile CSS and Javascript
        run: |
          npm install
          npm run prod
      
      - name: Configure PHP 7.4
        uses: shivammathur/setup-php@master
        with:
          php-version: 7.4
          extensions: mbstring, ctype, fileinfo, openssl, PDO, bcmath, json, tokenizer, xml, zip, sqlite3
  
      - name: Copy ENV file
        shell: bash
        env:
          ENV_FILE: ${{ secrets.LARAVEL_ENV }}
        run: 'echo "$ENV_FILE" > .env'
          
      - name: Install composer dependencies
        run: composer install
        
      - name: Generate key
        run: php artisan key:generate
      
      - name: Run tests
        run: php artisan test
        
      - name: Create deployment artifact
        run: tar -czf app.tar.gz --exclude=*.git --exclude=node_modules --exclude=tests --exclude=vendor *
        
      - name: Store artifact for distribution
        uses: actions/upload-artifact@v2
        with:
          name: app-build
          path: app.tar.gz
          retention-days: 1      
        
  get-config-settings:
    runs-on: ubuntu-latest
    needs: create-artifacts
    outputs:
      servers: ${{ steps.export-servers.outputs.servers }}
    steps:
      - uses: actions/checkout@v2
      
      - name: Export deployment matrix
        id: export-servers
        run: |
            echo pwd
            JSON="$(cat ./.github/servers.json)"
            JSON="${JSON//'%'/'%25'}"
            JSON="${JSON//$'\n'/'%0A'}"
            JSON="${JSON//$'\r'/'%0D'}"
            echo "::set-output name=servers::$JSON"
        
  deploy:
    runs-on: ubuntu-latest
    needs: get-config-settings
    strategy:
      matrix: 
        server: ${{ fromJson(needs.get-config-settings.outputs.servers) }}
    steps:
      - uses: actions/download-artifact@v2
        with:
          name: app-build
          
      - name: Upload
        uses: appleboy/scp-action@master
        with:
            host: ${{ matrix.server.host }}
            username: ${{ matrix.server.username }}
            key: ${{ secrets.SSH_KEY }}
            port: ${{ matrix.server.port }}
            source: app.tar.gz
            target: ${{ matrix.server.upload_path }}
    
      - name: Extract zip file
        uses: appleboy/ssh-action@master
        env:
          LARAVEL_ENV: ${{ secrets.LARAVEL_ENV }}
        with:
          host: ${{ matrix.server.host }}
          username: ${{ matrix.server.username }}
          key: ${{ secrets.SSH_KEY }}
          port: ${{ matrix.server.port }}
          script: |
            echo "Extracting file"
            sudo tar xzf ${{ matrix.server.upload_path }}/app.tar.gz -C ${{ matrix.server.app_path }}

      - name: Remove zip file
        uses: appleboy/ssh-action@master
        env:
          LARAVEL_ENV: ${{ secrets.LARAVEL_ENV }}
        with:
          host: ${{ matrix.server.host }}
          username: ${{ matrix.server.username }}
          key: ${{ secrets.SSH_KEY }}
          port: ${{ matrix.server.port }}
          script: |
            echo "Remove zip file"
            sudo rm ${{ matrix.server.upload_path }}//app.tar.gz

      - name: Installs Docker
        uses: appleboy/ssh-action@master
        with:
          host: ${{ matrix.server.host }}
          username: ${{ matrix.server.username }}
          key: ${{ secrets.SSH_KEY }}
          port: ${{ matrix.server.port }}
          script: |
            echo "Remove zip file"
            sudo apt-get update
            sudo apt-get install -y apt-transport-https ca-certificates curl gnupg lsb-release
            sudo curl -fsSL https://download.docker.com/linux/ubuntu/gpg | sudo gpg --dearmor -o /usr/share/keyrings/docker-archive-keyring.gpg
            sudo echo -e "deb [arch=amd64 signed-by=/usr/share/keyrings/docker-archive-keyring.gpg] https://download.docker.com/linux/ubuntu $(lsb_release -cs) stable" | sudo tee /etc/apt/sources.list.d/docker.list > /dev/null
            sudo apt-get update
            sudo apt-get install docker-ce docker-ce-cli containerd.io docker-compose -y
            sudo groupadd docker
            sudo usermod -aG docker ${{ matrix.server.username }}
            sudo service docker start

      - name: Create .env file
        uses: appleboy/ssh-action@master
        env:
          LARAVEL_ENV: ${{ secrets.LARAVEL_ENV }}
        with:
          host: ${{ matrix.server.host }}
          username: ${{ matrix.server.username }}
          key: ${{ secrets.SSH_KEY }}
          port: ${{ matrix.server.port }}
          script: |
            echo "Create .env file"
            cd ${{ matrix.server.app_path }}
            printf "%s" "$LARAVEL_ENV" > "${{ matrix.server.app_path }}/.env"
            
      - name: Run commands inside docker
        uses: appleboy/ssh-action@master
        with:
          host: ${{ matrix.server.host }}
          username: ${{ matrix.server.username }}
          key: ${{ secrets.SSH_KEY }}
          port: ${{ matrix.server.port }}
          script: |
            echo "Run commands inside docker"
            cd ${{ matrix.server.app_path }}
            docker-compose up -d --build
            echo "Running commands inside docker"
            docker-compose run ${{ matrix.server.container }} /bin/bash -c "composer install"
            docker-compose run ${{ matrix.server.container }} /bin/bash -c "npm install"
            docker-compose run ${{ matrix.server.container }} /bin/bash -c "npm run prod"
            docker-compose run ${{ matrix.server.container }} /bin/bash -c "php artisan storage:link"
            docker-compose run ${{ matrix.server.container }} /bin/bash -c "php artisan migrate"
            docker-compose run ${{ matrix.server.container }} /bin/bash -c "php artisan db:seed --class=UserSeeder"
